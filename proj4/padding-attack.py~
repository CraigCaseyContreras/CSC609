import string
import sys
import os
import argparse

from Proj4 import Padding_Oracle

#
# padding-attack.py
#
# author:
# date: 
# last update:
#
# template by: bjr oct 2019
# template update: 22 oct 2019
#

args_g = 0  # args are global
BLOCK_SIZE = 16

def attack_mode(oracle,intext):
	print(oracle.padding_oracle(intext), '\n\n') #Prints out false - so bad padding!!
	#print(oracle.remove_padding(intext), '\n\n') #Returns the ciphertext without the padding
	#print(decrypt_mode(oracle, intext), '\n\n')
	
	#Because the output is False, then stop, know the number of bytes. In this case, it returned false because the block consists entirely of pad bytes. So the leftmost action will cause an error.
		
	block = [intext[i:i+16] for i in range(0, len(intext), 16)] #makes the block
	for i in range(0, len(block)): #Prints all the blocks
		last_ciph_block = list(block[len(block) -1])
		ciph_blocks = list(block[i])
		print(ciph_blocks, 'end of blocks in order')


	
		
	'''
		for modify in range(BLOCK_SIZE -1, -1, -1):
			new_padding_length = BLOCK_SIZE - modify
			#Now start to make the 'modified' ciphertext to try to decrypt?
			hacked_cipher = b''
			for pad_index in range(1, new_padding_length):
				hacked_cipher += bytearray.fromhex('{:02x}'.format( new_padding_length ^ decoded_bytes[modify + pad_index] ) )
				#print(hacked_cipher)
	'''
				


		
	#print(hacked_ciphertext)


	pass
	
def encrypt_mode(oracle,intext):
	#print(intext)
	outtext = oracle.encrypt(intext)
	sys.stdout.buffer.write(outtext)
	
def decrypt_mode(oracle,intext):
	#funciton that goes outside??#
	outtext = oracle.decrypt(intext)
	sys.stdout.buffer.write(outtext)



# first one on the list is the default
modes = ["encrypt","decrypt","attack"]
# callout table
modes_f = { "encrypt":encrypt_mode, "decrypt":decrypt_mode, "attack":attack_mode}


def parse_args():
	parser = argparse.ArgumentParser(description="Padding attack against ciphertext from stdin. ")
	parser.add_argument("key", help="encipherment key, for oracle use only")
	parser.add_argument("-v", "--verbose", action="store_true", help="verbose")
	parser.add_argument("-m", "--mode", help="mode either encrypt, decrypt, or attack")	
	parser.add_argument("-R", "--norandomness", action="store_true", help="set IV and key to zero (key argument required but ignored)")	
	parser.add_argument("-z", "--zero", action="store_true", help="use zeros padding")	
	return parser.parse_args()

def main(argv):

	global args_g
	args_g = parse_args()
	if args_g.mode not in modes:
		args_g.mode = modes[0]
	
	padding_oracle = Padding_Oracle(key= args_g.key, zero_padding=args_g.zero, 
		norandomness=args_g.norandomness)
	bintext = bytearray(sys.stdin.buffer.read())
	modes_f[args_g.mode](padding_oracle,bintext)


main(sys.argv)
